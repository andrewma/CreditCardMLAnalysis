boostingperf
boost.card
boost_matrix
boostingperf
library(xgboost)
data("CreditCard")
CreditCard = data.frame(CreditCard)
CreditCard$card <- ifelse(CreditCard$card=="yes", 1, 0)
CreditCard$owner <- ifelse(CreditCard$owner=="yes", 1, 0)
CreditCard$selfemp <- ifelse(CreditCard$selfemp=="yes", 1, 0)
card_train = CreditCard %>%
sample_frac(.70)
card_test = CreditCard %>%
setdiff(card_train)
Y_train <- as.matrix(card_train[,"card"])
X_train <- as.matrix(card_train[!names(card_train) %in% c("card")])
dtrain <- xgb.DMatrix(data = X_train, label = Y_train)
X_test <- as.matrix(card_test[!names(card_train) %in% c("card")])
set.seed(123)
set.seed(2)
card.xgb = xgboost(data=dtrain,
max_depth=2,
eta = 0.1,
nrounds=40,
lambda=0,
print_every_n = 10,
objective="binary:logistic")
set.seed(123)
yhat.xgb <- predict(card.xgb,X_test)
y_pred = ifelse(yhat.xgb>0.2,1,0)
xgboost_matrix = table(y_pred, card_test$card)
xgboostperf = (sum(diag(xgboost_matrix)))/sum(xgboost_matrix)
xgboost_matrix
xgboostperf
importance <- xgb.importance(colnames(X_train),model=card.xgb)
importance
xgb.plot.importance(importance, rel_to_first=TRUE, xlab="Relative Importance")
library(keras)
library(ISLR)
library(dplyr)
library(AER)
library(tensorflow)
data("CreditCard")
CreditCard = data.frame(CreditCard)
CreditCard$owner <- ifelse(CreditCard$owner=="yes", 1, 0)
CreditCard$selfemp <- ifelse(CreditCard$selfemp=="yes", 1, 0)
CreditCard$card_yes <- ifelse(CreditCard$card == "yes",1,0)
set.seed(123)
card_train = CreditCard %>%
sample_frac(.7)
card_test = CreditCard %>%
setdiff(card_train)
train_labels <- to_categorical(card_train[,"card_yes"],2)
train_data <- as.matrix(card_train[!names(card_train) %in% c("card","card_yes")])
test_data <- as.matrix(card_test[!names(card_train) %in% c("card","card_yes")])
test_labels <- to_categorical(card_test[,"card_yes"])
model <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "softmax",
input_shape = dim(train_data)[2]) %>%
layer_dense(units = 64, activation = "softmax") %>%
layer_dense(units = 2, activation= "softmax")
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
early_stop <- callback_early_stopping(monitor = "val_loss", patience = 20)
epochs=200
history_class <- model %>% fit(
train_data,
train_labels,
epochs = epochs,
validation_split = 0.2,
callbacks = list(early_stop)
)
plot(history_class)
test_predictions <- model %>% predict(test_data)
test_class <- model %>% predict_classes(test_data)
error_table = table(test_labels[,2], test_class)
neuralnetperf = (sum(diag(error_table)))/sum(error_table)
neuralnetperf
data("CreditCard")
library(dplyr)
library(ggplot2)
library(e1071)
set.seed(123)
CreditCard$card = as.factor(CreditCard$card)
CreditCard$owner <- ifelse(CreditCard$owner=="yes", 1, 0)
CreditCard$selfemp <- ifelse(CreditCard$selfemp=="yes", 1, 0)
training_set = CreditCard %>%
sample_frac(.7)
testing_set = CreditCard %>%
setdiff(training_set)
dat = data.frame(x = X_train, y = as.factor(Y_train))
CreditCard$card = factor(CreditCard$card, levels = c(0, 1))
set.seed(123)
tune.out = tune(svm, card~., data = training_set, kernel = "radial",
ranges = list(cost = c(0.1,1,10,100,1000), gamma = c(0.5,1,2,3,4)))
bestmod = tune.out$best.model
plot(bestmod, training_set, age~months)
svm_table = table(true = testing_set$card, pred = predict(tune.out$best.model,
newdata = testing_set))
svmperf = (sum(diag(svm_table)))/sum(svm_table)
svmperf
mlperformance<-matrix(c(logperf, knnperf, ridgeperf, lassoperf, treeperf, baggingperf,
rfperf, boostingperf, xgboostperf, neuralnetperf, svmperf),
ncol=1,byrow=TRUE)
mlperformance<-matrix(c(baggingperf,
rfperf, boostingperf, xgboostperf, neuralnetperf, svmperf),
ncol=1,byrow=TRUE)
rownames(mlperformance)<-c("Bagging","Random Forest",
"Boosting", "XGBoost", "Neural Network",
"Support Vector Machine")
colnames(mlperformance)<-c("Performance")
mlperformance
library(AER)
data("CreditCard")
CreditCard = data.frame(CreditCard)
library(randomForest)
set.seed(123)
card_train = CreditCard %>%
sample_frac(.70)
card_test = CreditCard %>%
setdiff(card_train)
set.seed(123)
bag.card = randomForest(card ~., data = card_train,
mtry=ncol(card_train) - 1,
importance=TRUE)
plot(bag.card, ylim=c(0.01, .05))
varImpPlot(bag.card)
set.seed(123)
yhat.bag = predict(bag.card, newdata = card_test)
table(yhat.bag, card_test$card)
CM = table(yhat.bag, card_test$card)
baggingperf = (sum(diag(CM)))/sum(CM)
baggingperf
set.seed(123)
rf.card = randomForest(card~.,
data = card_train,
mtry = 5,
importance = TRUE,
do.trace = 100)
plot(rf.card, ylim = c(0, 0.03))
yhat.rf = predict(rf.card, newdata = card_test)
table(yhat.rf, card_test$card)
CM = table(yhat.rf, card_test$card)
rfperf = (sum(diag(CM)))/sum(CM)
rfperf
varImpPlot(rf.card)
library(gbm)
library(randomForest)
data("CreditCard")
ls(CreditCard)
CreditCard$card <- ifelse(CreditCard$card=="yes", 1, 0)
set.seed(123)
card_train = CreditCard %>%
sample_frac(.70)
card_test = CreditCard %>%
setdiff(card_train)
set.seed(123)
boost.card = gbm(card~.,
data = card_train,
distribution = "bernoulli",
n.trees = 500,
interaction.depth = 4)
summary(boost.card)
yhat.boost = predict(boost.card,
newdata = card_test,
n.trees = 5000)
boost_pred = predict(boost.card, card_test, n.trees=500, type = "response")
y_pred = ifelse(boost_pred>0.2,1,0)
boost_matrix = table(card_test$card, y_pred)
boostingperf = (sum(diag(boost_matrix)))/sum(boost_matrix)
boostingperf
boost.card
boost_matrix
boostingperf
library(xgboost)
data("CreditCard")
CreditCard = data.frame(CreditCard)
CreditCard$card <- ifelse(CreditCard$card=="yes", 1, 0)
CreditCard$owner <- ifelse(CreditCard$owner=="yes", 1, 0)
CreditCard$selfemp <- ifelse(CreditCard$selfemp=="yes", 1, 0)
card_train = CreditCard %>%
sample_frac(.70)
card_test = CreditCard %>%
setdiff(card_train)
Y_train <- as.matrix(card_train[,"card"])
X_train <- as.matrix(card_train[!names(card_train) %in% c("card")])
dtrain <- xgb.DMatrix(data = X_train, label = Y_train)
X_test <- as.matrix(card_test[!names(card_train) %in% c("card")])
set.seed(123)
set.seed(2)
card.xgb = xgboost(data=dtrain,
max_depth=2,
eta = 0.1,
nrounds=40,
lambda=0,
print_every_n = 10,
objective="binary:logistic")
set.seed(123)
yhat.xgb <- predict(card.xgb,X_test)
y_pred = ifelse(yhat.xgb>0.2,1,0)
xgboost_matrix = table(y_pred, card_test$card)
xgboostperf = (sum(diag(xgboost_matrix)))/sum(xgboost_matrix)
xgboost_matrix
xgboostperf
importance <- xgb.importance(colnames(X_train),model=card.xgb)
importance
xgb.plot.importance(importance, rel_to_first=TRUE, xlab="Relative Importance")
library(keras)
library(ISLR)
library(dplyr)
library(AER)
library(tensorflow)
data("CreditCard")
CreditCard = data.frame(CreditCard)
CreditCard$owner <- ifelse(CreditCard$owner=="yes", 1, 0)
CreditCard$selfemp <- ifelse(CreditCard$selfemp=="yes", 1, 0)
CreditCard$card_yes <- ifelse(CreditCard$card == "yes",1,0)
set.seed(123)
card_train = CreditCard %>%
sample_frac(.7)
card_test = CreditCard %>%
setdiff(card_train)
train_labels <- to_categorical(card_train[,"card_yes"],2)
train_data <- as.matrix(card_train[!names(card_train) %in% c("card","card_yes")])
test_data <- as.matrix(card_test[!names(card_train) %in% c("card","card_yes")])
test_labels <- to_categorical(card_test[,"card_yes"])
model <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "softmax",
input_shape = dim(train_data)[2]) %>%
layer_dense(units = 64, activation = "softmax") %>%
layer_dense(units = 2, activation= "softmax")
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
early_stop <- callback_early_stopping(monitor = "val_loss", patience = 20)
epochs=200
history_class <- model %>% fit(
train_data,
train_labels,
epochs = epochs,
validation_split = 0.2,
callbacks = list(early_stop)
)
library(ISLR)
library(AER)
library(ggplot2)
data("CreditCard")
CreditCard = data.frame(CreditCard)
names(CreditCard)
nrow(CreditCard)
glm.fits1 <- glm(card~reports+share+selfemp+majorcards+active,data = CreditCard, family = binomial())
glm.probs1 = predict(glm.fits1,CreditCard,type="response")
glm.pred1 = rep(0,length(glm.probs1))
glm.pred1[glm.probs1>.5]=1
table1 = table(glm.pred1,CreditCard$card)
table1
prob1 = (1000+294)/1319
prob1
glm.fits2 <- glm(card~reports+share+selfemp+dependents+months,data = CreditCard, family = binomial())
glm.probs2 = predict(glm.fits2,CreditCard,type="response")
glm.pred2 = rep(0,length(glm.probs2))
glm.pred2[glm.probs2>.5]=1
table2 = table(glm.pred2,CreditCard$card)
table2
prob2 = (998+295)/1319
prob2
glm.fits3 <- glm(card~reports+share+selfemp,data = CreditCard, family = binomial())
glm.probs3 = predict(glm.fits3,CreditCard,type="response")
glm.pred3 = rep(0,length(glm.probs3))
glm.pred3[glm.probs3>.5]=1
table3 = table(glm.pred3,CreditCard$card)
table3
prob3 = (998+295)/1319
prob3
glm.fits4 <- glm(card~reports,data = CreditCard, family = binomial())
glm.probs4 = predict(glm.fits4,CreditCard,type="response")
glm.pred4 = rep(0,length(glm.probs4))
glm.pred4[glm.probs4>.5]=1
table4 = table(glm.pred4,CreditCard$card)
table4
prob4 = (1005+104)/1319
prob4
glm.fits5 <- glm(card~reports+income+owner+share+selfemp+dependents+majorcards+active,data = CreditCard, family = binomial())
glm.probs5= predict(glm.fits5,CreditCard,type="response")
glm.pred5 = rep(0,length(glm.probs5))
glm.pred5[glm.probs5>.5]=1
table5 = table(glm.pred5,CreditCard$card)
table5
prob5 = (1000+293)/1319
prob5
summary(glm.fits1)
glm.fits1summary=summary(glm.fits1)
coefs=as.data.frame(glm.fits1summary$coefficients[-1,1:2])
names(coefs)[2]="se"
coefs$vars=rownames(coefs)
ggplot(coefs, aes(vars,Estimate)) +
geom_errorbar(aes(ymin=Estimate-1.96*se,ymax=Estimate+1.96*se),lwd=1, colour="red",width=0)+
geom_errorbar(aes(ymin=Estimate - se,ymax=Estimate+se),lwd=1.5,colour="blue",width=0)+
geom_point(size=2,pch=21,fill="yellow")
glm.fits=glm(card~reports+share+selfemp+majorcards+active,data=CreditCard,family = binomial(link = "probit"))
glm.probs=predict(glm.fits,CreditCard,type="response")
glm.pred=rep("0",length(glm.probs))
glm.pred[glm.probs>.5]="1"
table(glm.pred,CreditCard$card)
mean(glm.pred==CreditCard$card)
logitProb = (999+294)/1319
logitProb
library(class)
train = (CreditCard[1,659])
head(train)
train.X=cbind(CreditCard$reports,CreditCard$share)[train,]
test.X=cbind(CreditCard$reports,CreditCard$share)[CreditCard[660,1319],]
train.card=CreditCard$card[train]
set.seed(5)
knn.pred=knn(train.X,test.X,train.card,k=1)
library(ISLR)
library(AER)
library(ggplot2)
data("CreditCard")
CreditCard = data.frame(CreditCard)
names(CreditCard)
nrow(CreditCard)
glm.fits1 <- glm(card~reports+share+selfemp+majorcards+active,data = CreditCard, family = binomial())
glm.probs1 = predict(glm.fits1,CreditCard,type="response")
glm.pred1 = rep(0,length(glm.probs1))
glm.pred1[glm.probs1>.5]=1
table1 = table(glm.pred1,CreditCard$card)
table1
prob1 = (1000+294)/1319
prob1
glm.fits2 <- glm(card~reports+share+selfemp+dependents+months,data = CreditCard, family = binomial())
glm.probs2 = predict(glm.fits2,CreditCard,type="response")
glm.pred2 = rep(0,length(glm.probs2))
glm.pred2[glm.probs2>.5]=1
table2 = table(glm.pred2,CreditCard$card)
table2
prob2 = (998+295)/1319
prob2
glm.fits3 <- glm(card~reports+share+selfemp,data = CreditCard, family = binomial())
glm.probs3 = predict(glm.fits3,CreditCard,type="response")
glm.pred3 = rep(0,length(glm.probs3))
glm.pred3[glm.probs3>.5]=1
table3 = table(glm.pred3,CreditCard$card)
table3
prob3 = (998+295)/1319
prob3
glm.fits4 <- glm(card~reports,data = CreditCard, family = binomial())
glm.probs4 = predict(glm.fits4,CreditCard,type="response")
glm.pred4 = rep(0,length(glm.probs4))
glm.pred4[glm.probs4>.5]=1
table4 = table(glm.pred4,CreditCard$card)
table4
prob4 = (1005+104)/1319
prob4
glm.fits5 <- glm(card~reports+income+owner+share+selfemp+dependents+majorcards+active,data = CreditCard, family = binomial())
glm.probs5= predict(glm.fits5,CreditCard,type="response")
glm.pred5 = rep(0,length(glm.probs5))
glm.pred5[glm.probs5>.5]=1
table5 = table(glm.pred5,CreditCard$card)
table5
prob5 = (1000+293)/1319
prob5
summary(glm.fits1)
glm.fits1summary=summary(glm.fits1)
coefs=as.data.frame(glm.fits1summary$coefficients[-1,1:2])
names(coefs)[2]="se"
coefs$vars=rownames(coefs)
ggplot(coefs, aes(vars,Estimate)) +
geom_errorbar(aes(ymin=Estimate-1.96*se,ymax=Estimate+1.96*se),lwd=1, colour="red",width=0)+
geom_errorbar(aes(ymin=Estimate - se,ymax=Estimate+se),lwd=1.5,colour="blue",width=0)+
geom_point(size=2,pch=21,fill="yellow")
glm.fits=glm(card~reports+share+selfemp+majorcards+active,data=CreditCard,family = binomial(link = "probit"))
glm.probs=predict(glm.fits,CreditCard,type="response")
glm.pred=rep("0",length(glm.probs))
glm.pred[glm.probs>.5]="1"
table(glm.pred,CreditCard$card)
mean(glm.pred==CreditCard$card)
logitProb = (999+294)/1319
logitProb
library(class)
train = (CreditCard[1,659])
head(train)
train.X=cbind(CreditCard$reports,CreditCard$share)[train,]
test.X=cbind(CreditCard$reports,CreditCard$share)[CreditCard[660,1319],]
train.card=CreditCard$card[train]
set.seed(5)
knn.pred=knn(train.X,test.X,train.card,k=1)
glm.fits1 <- glm(card~reports+share+selfemp+majorcards+active,
data = CreditCard, family = binomial)
glm.probs1 = predict(glm.fits1,CreditCard,type="response")
glm.pred1 = rep(0,length(glm.probs1))
glm.pred1[glm.probs1>.99]=1
table1 = table(glm.pred1,CreditCard$card)
logperf = (sum(diag(table1)))/sum(table1)
table1
logperf
plot(reports,card01,xlab="reports",ylab="card01")
library(AER)
data(CreditCard)
glm.fits1 <- glm(card~reports+share+selfemp+majorcards+active,
data = CreditCard, family = binomial)
glm.probs1 = predict(glm.fits1,CreditCard,type="response")
glm.pred1 = rep(0,length(glm.probs1))
glm.pred1[glm.probs1>.99]=1
table1 = table(glm.pred1,CreditCard$card)
logperf = (sum(diag(table1)))/sum(table1)
table1
logperf
plot(reports,card01,xlab="reports",ylab="card")
glm.fits1 <- glm(card~reports+share+selfemp+majorcards+active,
data = CreditCard, family = binomial)
glm.probs1 = predict(glm.fits1,CreditCard,type="response")
glm.pred1 = rep(0,length(glm.probs1))
glm.pred1[glm.probs1>.99]=1
table1 = table(glm.pred1,CreditCard$card)
logperf = (sum(diag(table1)))/sum(table1)
table1
logperf
plot(reports,card,xlab="reports",ylab="card")
g=glm(card~reports,family=binomial,data = CreditCard)
curve(predict(g,data.frame(reports=x),type="resp"),add=TRUE)
library(AER)
data(CreditCard)
glm.fits1 <- glm(card~reports+share+selfemp+majorcards+active,
data = CreditCard, family = binomial)
glm.probs1 = predict(glm.fits1,CreditCard,type="response")
glm.pred1 = rep(0,length(glm.probs1))
glm.pred1[glm.probs1>.99]=1
table1 = table(glm.pred1,CreditCard$card)
logperf = (sum(diag(table1)))/sum(table1)
table1
logperf
plot(reports,card,xlab="reports",ylab="card")
g=glm(card~reports,family=binomial,data = CreditCard)
curve(predict(g,data.frame(reports=x),type="resp"),add=TRUE)
data("CreditCard")
library(class)
library(dplyr)
data("CreditCard")
CreditCard$card <- ifelse(CreditCard$card=="yes", 1, 0)
CreditCard$owner <- ifelse(CreditCard$owner=="yes", 1, 0)
CreditCard$selfemp <- ifelse(CreditCard$selfemp=="yes", 1, 0)
set.seed(123)
train = CreditCard %>% sample_frac(.7)
test = CreditCard %>% setdiff(train)
glm.fits1 <- glm(card~.,
data = train, family = "binomial")
logitmodel = predict(glm.fits1,test,type="response")
logpred = rep(0,length(logitmodel))
logpred[logitmodel>.1]=1
logit_matrix = table(logpred,test$card)
logperf = (sum(diag(logit_matrix)))/sum(logit_matrix)
logit_matrix
logperf
plot(reports,card01,xlab="reports",ylab="card01")
library(AER)
data(CreditCard)
CreditCard$card01 <- ifelse(CreditCard$card=="yes", 1, 0)
glm.fits1 <- glm(card~reports+share+selfemp+majorcards+active,
data = CreditCard, family = binomial)
glm.probs1 = predict(glm.fits1,CreditCard,type="response")
glm.pred1 = rep(0,length(glm.probs1))
glm.pred1[glm.probs1>.99]=1
table1 = table(glm.pred1,CreditCard$card)
logperf = (sum(diag(table1)))/sum(table1)
table1
logperf
plot(reports,card01,xlab="reports",ylab="card01")
library(AER)
data(CreditCard)
CreditCard$card01 <- ifelse(CreditCard$card=="yes", 1, 0)
glm.fits1 <- glm(card~reports+share+selfemp+majorcards+active,
data = CreditCard, family = binomial)
glm.probs1 = predict(glm.fits1,CreditCard,type="response")
glm.pred1 = rep(0,length(glm.probs1))
glm.pred1[glm.probs1>.99]=1
table1 = table(glm.pred1,CreditCard$card)
logperf = (sum(diag(table1)))/sum(table1)
table1
logperf
plot(reports,card01,xlab="reports",ylab="card01")
library(AER)
data(CreditCard)
CreditCard$card01 <- ifelse(CreditCard$card=="yes", 1, 0)
glm.fits1 <- glm(card~reports+share+selfemp+majorcards+active,
data = CreditCard, family = binomial)
glm.probs1 = predict(glm.fits1,CreditCard,type="response")
glm.pred1 = rep(0,length(glm.probs1))
glm.pred1[glm.probs1>.99]=1
table1 = table(glm.pred1,CreditCard$card)
logperf = (sum(diag(table1)))/sum(table1)
table1
logperf
plot(reports,card01,xlab="reports",ylab="card01")
library(AER)
data(CreditCard)
CreditCard$card01 <- ifelse(CreditCard$card=="yes", 1, 0)
glm.fits1 <- glm(card~reports+share+selfemp+majorcards+active,
data = CreditCard, family = binomial)
glm.probs1 = predict(glm.fits1,CreditCard,type="response")
glm.pred1 = rep(0,length(glm.probs1))
glm.pred1[glm.probs1>.99]=1
table1 = table(glm.pred1,CreditCard$card)
logperf = (sum(diag(table1)))/sum(table1)
table1
logperf
plot(reports,card01,xlab="reports",ylab="card01")
